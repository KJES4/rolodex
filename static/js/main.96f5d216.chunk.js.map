{"version":3,"sources":["mainLogo.svg","header.js","register.js","login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","login","nav","this","className","src","Logo","alt","React","Component","Register","props","changeName","e","setState","Name","target","value","changeEmail","Email","changePhone","Phone","changePass","Pass","createUserName","fullName","split","fNLength","length","newUserName","substring","userName","handleSubmit","preventDefault","id","action","Accounts","method","for","type","placeholder","name","onChange","required","onSubmit","Login","changeUsername","userPass","HomeFormSection","Body","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96f5d216.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainLogo.0e57bce2.svg\";","import React from \"react\";\r\nimport Logo from \"./mainLogo.svg\";\r\n\r\nclass Header extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      login: true\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let nav = null;\r\n    if (this.state.login) {\r\n      nav = (\r\n        <ul>\r\n          <li>Log out</li>\r\n          <li>Contacts</li>\r\n        </ul>\r\n      );\r\n    }\r\n    return (\r\n      <header className=\"header\">\r\n        <img src={Logo} alt=\"app logo\"></img>\r\n        <h1>Rolodex</h1>\r\n        <nav>{nav}</nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Accounts from \"./users.js\";\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Name: \"\",\r\n      userName: \"\",\r\n      Email: \"\",\r\n      Phone: \"\",\r\n      Pass: \"\"\r\n    };\r\n  }\r\n\r\n  changeName = e => {\r\n    this.setState({\r\n      Name: e.target.value\r\n    });\r\n  };\r\n\r\n  changeEmail = e => {\r\n    this.setState({\r\n      Email: e.target.value\r\n    });\r\n  };\r\n\r\n  changePhone = e => {\r\n    this.setState({\r\n      Phone: e.target.value\r\n    });\r\n  };\r\n\r\n  changePass = e => {\r\n    this.setState({\r\n      Pass: e.target.value\r\n    });\r\n  };\r\n\r\n  createUserName = () => {\r\n    const fullName = this.state.Name.split(\" \");\r\n    const fNLength = fullName[0].length;\r\n    const firstLetter = fullName[0].substring(0, 1);\r\n    const newUserName = firstLetter + fullName[1] + fNLength;\r\n    this.setState({\r\n      userName: newUserName\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"registrationForm\" action={Accounts} method=\"post\">\r\n        <section id=\"register\">\r\n          <h2>Register</h2>\r\n          <label for=\"name\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter First and Last Name\"\r\n            name=\"name\"\r\n            value={this.state.Name}\r\n            onChange={this.changeName}\r\n            required\r\n          ></input>\r\n          <label for=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            name=\"email\"\r\n            value={this.state.Email}\r\n            onChange={this.changeEmail}\r\n            required\r\n          ></input>\r\n          <label for=\"phone\">Phone Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            placeholder=\"Enter Phone Number\"\r\n            name=\"phone\"\r\n            value={this.state.Phone}\r\n            onChange={this.changePhone}\r\n            required\r\n          ></input>\r\n          <label for=\"pW\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Choose Password\"\r\n            name=\"pW\"\r\n            value={this.state.Pass}\r\n            onChange={this.changePass}\r\n            required\r\n          ></input>\r\n          <button onSubmit={(this.createUserName, this.handleSubmit)}>\r\n            Register\r\n          </button>\r\n        </section>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport \"./login.css\";\r\nimport Register from \"./register.js\";\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userName: \"\",\r\n      userPass: \"\"\r\n    };\r\n  }\r\n\r\n  changeUsername = e => {\r\n    this.setState({\r\n      userName: e.target.value\r\n    });\r\n  };\r\n\r\n  changePass = e => {\r\n    this.setState({\r\n      userPass: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <section id=\"login\">\r\n          <h2>Login</h2>\r\n          <label for=\"user\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Username\"\r\n            name=\"user\"\r\n            value={this.state.userName}\r\n            onChange={this.changeUsername}\r\n            required\r\n          ></input>\r\n          <label for=\"pass\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            name=\"pass\"\r\n            value={this.state.userPass}\r\n            onChange={this.changePass}\r\n            required\r\n          ></input>\r\n          <button>Login</button>\r\n        </section>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass HomeFormSection extends React.Component {\r\n  render() {\r\n    return (\r\n      <main id=\"loginContainer\">\r\n        <Register />\r\n        <Login />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeFormSection;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./header.js\";\nimport HomeFormSection from \"./login.js\";\n\nfunction Body() {\n  return (\n    <div className=\"Body\">\n      <Header />\n      <HomeFormSection />\n    </div>\n  );\n}\n\nexport default Body;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Body from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Body />, document.querySelector(\"#root\"));\n// ReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}